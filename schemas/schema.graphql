#General Interfaces
interface Node {
    id: ID!
}

interface Page {
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    startID: ID
    endID: ID
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}


#User
type User implements Node {
    id: ID!
}

type UserPage implements Page {
    nodes: [User]
    pageInfo: PageInfo!
    totalCount: Int!
}

input UserFilter {

}


#Component
type Component implements Node {
    id: ID!
}

type ComponentPage implements Page {
    nodes: [Component]
    pageInfo: PageInfo!
    totalCount: Int!
}

input ComponentFilter {

}

type ComponentInterface {

}


#Issue
type Issue implements Comment {
    id: ID!
    title: String!
    components(after: ID, before: ID, filterBy: ComponentFilter, first: Int, last: Int): ComponentPage
    body: String
    bodyRendered: String
    createdBy: User
    editedBy: User
    createdAt: Date!
    editedAt: Date
    updatedAt: Date
    isOpen: Boolean!
    isDuplicate: Boolean!
    issueCategory: IssueCategory!
    linkedIssues(after: ID, before: ID, filterBy: IssueFilter, first: Int, last: Int): IssuePage
    reactions(after: ID, before: ID, filterBy: ReactionGroupFilter, first: Int, last: Int): ReactionGroupPage
    assignees(after: ID, before: ID, filterBy: UserFilter, first: Int, last: Int): UserPage
    label(after: ID, before: ID, filterBy: LabelFilter, first: Int, last: Int): LabelPage
    participants(after: ID, before: ID, filterBy: UserFilter, first: Int, last: Int): UserPage
    timeline(after: ID, before: ID, filterBy: IssueTimelineItemFilter, first: Int, last: Int): IssueTimelineItemPage
    locations(after: ID, before: ID, filterBy: IssueLocationFilter, first: Int, last: Int): IssueLocationPage
    viewerCanEdit: Boolean!
    viewerCanComment: Boolean!
    startDate: Date
    DueDate: Date
    estimatedTime: TimeSpan
}

type IssuePage implements Page {
    nodes: [Issue]
    pageInfo: PageInfo!
    totalCount: Int!
}

input IssueFilter {

}


#Issue timeline items

interface IssueTimelineItem implements Node {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
}

type IssueTimelineItemPage implements Page {
    nodes: [IssueTimelineItem]
    pageInfo: PageInfo!
    totalCount: Int!
}

input IssueTimelineItemFilter {

}

#IssueComment
interface Comment implements Node {
    id: ID!
    createdBy: User
    editedBy: User
    createdAt: Date!
    editedAt: Date
    body: String
    bodyRendered: String
    reactions(after: ID, before: ID, filterBy: ReactionGroupFilter, first: Int, last: Int): ReactionGroupPage
    viewerCanEdit: Boolean!
}

type IssueComment implements IssueTimelineItem,Comment {
    id: ID!
    createdBy: User
    editedBy: User
    createdAt: Date!
    editedAt: Date
    body: String
    bodyRendered: String
    reactions(after: ID, before: ID, filterBy: ReactionGroupFilter, first: Int, last: Int): ReactionGroupPage
    viewerCanEdit: Boolean!
}

type IssueCommentPage implements Page {
    nodes: [IssueComment]
    pageInfo: PageInfo!
    totalCount: Int!
}

input IssueCommentFilter {

}

type DeletedIssueComment implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    deletedBy: User
    deletedAt: Date
}

#when mentioned in a commit or a pull request
type ReferencedByOtherEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    component: Component
    source: String
    sourceURL: String
}

type ReferencedByIssueEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    mentionedAt: Issue
    mentionedInComment: IssueComment
}

#when an user actively links another issue
type LinkEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    linkedIssue: Issue
}

# when an user unlinks another issue
type UnlinkEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    removedLinkedIssue: Issue
}

#when another issue links this issue
type WasLinkedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    linkedBy: Issue
}

#when another issue unlinks this issue
type WasUnlinkedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    unlinkedBy: Issue
}

type LabeledEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    label: Label!
}

type UnlabledEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    removedLabel: Label!
}

type PinnedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
}

type UnpinnedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
}

type RenamedTitleEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    oldTitle: String!
    newTitle: String!
}

type CategoryChangedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    oldType: IssueCategory!
    newType: IssueCategory!
}

type AssignedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    assignee: User!
}

type UnassignedEvet implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    removedAssignee: User!
}

type ClosedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
}

type ReopenedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
}

type PriorityChangedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    oldPriority: Priority
    newPriority: Priority
}

type StartDateChangedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    oldStartDate: Date
    newStartDate: Date
}

type DueDateChangedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    oldDueDate: Date
    newDueDate: Date
}

type EstimatedTimeChangedEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    oldEstimatedTime: TimeSpan
    newEstimatedTime: TimeSpan
}

type AddedLocationEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    location: IssueLocation!
}

type RemovedLocationEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    removedLocation: IssueLocation!
}

type MarkedAsDuplicateEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
    originalIssue: Issue
}

type UnmarkedAsDuplicateEvent implements IssueTimelineItem {
    id: ID!
    issue: Issue!
    createdBy: User
    createdAt: Date!
}



type ReactionGroup {
    users: [User]
    reaction: String!
}

type ReactionGroupPage {
    nodes: [ReactionGroup]
    pageInfo: PageInfo!
    totalCount: Int!
}

input ReactionGroupFilter {

}

type Label implements Node {
    id: ID!
    name: String!
    description: String
    color: Color
}

type LabelPage {
    nodes: [Label]
    pageInfo: PageInfo!
    totalCount: Int!
}

input LabelFilter {

}

#scalars
enum Priority {
    LOW,
    MEDIUM,
    HIGH
}

enum IssueCategory {
    BUG,
    FEATURE_REQUEST,
    UNCLASSIFIED
}

enum IssueTimelineItemType {
    ISSUE_COMMENT,
    DELETED_ISSUE_COMMENT,
    REFERENCED_BY_OTHER_EVENT,
    REFERENCED_BY_ISSUE_FOUND,
    LINK_EVENT,
    UNLINK_EVENT,
    WAS_LINKED_EVENT,
    WAS_UNLINKED_EVENT,
    LABELED_EVENT,
    UNLABELED_EVENT,
    PINNED_EVENT,
    UNPINNED_EVENT,
    RENAMED_TITLE_EVENT,
    CATEGORY_CHANGED_EVENT,
    ASSIGNED_EVENT,
    UNASSIGNED_EVENT,
    CLOSED_EVENT,
    REOPENED_EVENT,
    PRIORITY_CHANGED_EVENT,
    START_DATE_CHANGED,
    DUE_DATE_CHANGED,
    ESTIMATED_TIME_CHANGED,
    ADDED_LOCATION_EVENT,
    REMOVED_LOCATION_EVENT,
    MARKED_AS_DUPLICATE_EVENT,
    UNMARKED_AS_DUPLICATE_EVENT,
}

scalar Date

scalar TimeSpan

scalar Color

#unions
union IssueLocation = Component | ComponentInterface

type IssueLocationPage {
    nodes: [IssueLocation]
    pageInfo: PageInfo!
    totalCount: Int!
}

input IssueLocationFilter {

}