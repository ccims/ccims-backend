#General Interfaces
interface Node {
    id: ID!
}

interface Connection {
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    startID: ID
    endID: ID
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}


#User
type User implements Node {
    id: ID!
}

type UserConnection implements Connection {
    nodes: [User]
    pageInfo: PageInfo!
    totalCount: Int!
}

input UserFilter {

}


#Component
type Component implements Node {
    id: ID!
}

type ComponentConnection implements Connection {
    nodes: [Component]
    pageInfo: PageInfo!
    totalCount: Int!
}

input ComponentFilter {

}


#Issue
type Issue implements Comment {
    id: ID!
    title: String!
    body: String!
    bodyRendered: String!
    createdBy: User!

}

type IssueConnection implements Connection {
    nodes: [Issue]
    pageInfo: PageInfo!
    totalCount: Int!
}

input IssueFilter {

}


#Issue timeline items

interface IssueTimelineItem implements Node {
    id: ID!
    issue: Issue!
    createdBy: User
}

type IssueTimelineItemConnection implements Connection {
    nodes: [IssueTimelineItem]
    pageInfo: PageInfo
    totalCount: Int!
}

input IssueTimelineItemFilter {

}

#IssueComment
interface Comment implements Node {
    id: ID!
    body: String!
    bodyRendered: String!
}

type IssueComment implements IssueTimelineItem {
    id: ID!
    body: String!
    bodyRendered: String!
}

#scalars
enum Priority {
    LOW,
    MEDIUM,
    HIGH
}